"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7809],{1698:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>a});var n=s(4848),i=s(8453);const l={sidebar_position:4,title:"JSON Files"},r="JSON Task Configuration (json)",d={id:"guides/task-types/other-tasks/json",title:"JSON Files",description:"Create or modify any json file",source:"@site/docs/guides/task-types/other-tasks/json.md",sourceDirName:"guides/task-types/other-tasks",slug:"/guides/task-types/other-tasks/json",permalink:"/integrate/docs/guides/task-types/other-tasks/json",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"JSON Files"},sidebar:"tutorialSidebar",previous:{title:"Shell Commands",permalink:"/integrate/docs/guides/task-types/other-tasks/shell"},next:{title:"babel.config.js",permalink:"/integrate/docs/guides/task-types/other-tasks/babel-config"}},o={},a=[{value:"Task Properties",id:"task-properties",level:2},{value:"Action Properties",id:"action-properties",level:2},{value:"Strategy Property",id:"strategy-property",level:3},{value:"Example",id:"example",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.h1,{id:"json-task-configuration-json",children:["JSON Task Configuration (",(0,n.jsx)(t.code,{children:"json"}),")"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"Create or modify any json file"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"json"})," task allows you to create or modify json files."]}),"\n",(0,n.jsx)(t.h2,{id:"task-properties",children:"Task Properties"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Property"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"task"}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:'"json", required'}),(0,n.jsx)(t.td,{children:'Specifies the task type, which should be set to "json" for this task.'})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"name"}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"string"}),(0,n.jsxs)(t.td,{children:["An optional name for the task. If provided, the task state will be saved as a variable. Visit ",(0,n.jsx)(t.a,{href:"../../states",children:"Task and Action States"})," page to learn more."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"label"}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"string"}),(0,n.jsx)(t.td,{children:"An optional label or description for the task."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"when"}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"object"}),(0,n.jsxs)(t.td,{children:["Visit ",(0,n.jsx)(t.a,{href:"../../when",children:"Conditional Tasks and Actions"})," page to learn how to execute task conditionally."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"path"}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"string"}),(0,n.jsx)(t.td,{children:"Specifies the path of the json file to create or modify."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"actions"}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Array<",(0,n.jsx)(t.a,{href:"#action-properties",children:"Action"}),">, required"]}),(0,n.jsx)(t.td,{children:"An array of action items that define the modifications to be made in the file."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"action-properties",children:"Action Properties"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Property"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"name"}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"string"}),(0,n.jsxs)(t.td,{children:["An optional name for the task. If provided, the task state will be saved as a variable. Visit ",(0,n.jsx)(t.a,{href:"../../states",children:"Task and Action States"})," page to learn more."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"when"}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"object"}),(0,n.jsxs)(t.td,{children:["Visit ",(0,n.jsx)(t.a,{href:"../../when",children:"Conditional Tasks and Actions"}),"  page to learn how to execute action conditionally."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"set"}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"object"}),(0,n.jsx)(t.td,{children:"An object containing key-value pairs that you want to add or modify in the json."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"strategy"}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["one of ",(0,n.jsx)(t.a,{href:"#strategy-property",children:"Strategy"})]}),(0,n.jsx)(t.td,{children:"Specifies how to handle merging new and existing values."})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"strategy-property",children:"Strategy Property"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"assign"}),": (default) Overwrites the entire key with the new value."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"append"}),": Appends values only if the key does not already exist."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"merge"}),": Merges new values into existing dictionaries."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"merge_concat"}),": Merges dictionaries while concatenating arrays."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"merge_distinct"}),": Merges dictionaries while ensuring that objects with deep equality are distinct."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:'task: json\nlabel: Add or Modify Json Entries\npath: some_file.json\nactions:\n  - set:\n      MY_KEY: "my value"\n      ANOTHER_KEY: "another value"\n    strategy: assign\n  - set:\n      NEW_KEY: "new value"\n    strategy: merge\n'})}),"\n",(0,n.jsxs)(t.p,{children:["In this example, the ",(0,n.jsx)(t.code,{children:"json"})," task is used to add or modify entries in the ",(0,n.jsx)(t.code,{children:"some_file.json"})," file. Two actions are specified:"]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["The first action sets the value of ",(0,n.jsx)(t.code,{children:"MY_KEY"})," to ",(0,n.jsx)(t.code,{children:'"my value"'})," using the ",(0,n.jsx)(t.code,{children:"assign"})," strategy, which overwrites the value if it already exists."]}),"\n",(0,n.jsxs)(t.li,{children:["The second action sets the value of ",(0,n.jsx)(t.code,{children:"NEW_KEY"})," to ",(0,n.jsx)(t.code,{children:'"new value"'})," using the ",(0,n.jsx)(t.code,{children:"merge"})," strategy, which merges new values into existing dictionaries."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>d});var n=s(6540);const i={},l=n.createContext(i);function r(e){const t=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);